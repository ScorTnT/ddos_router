Index: config/intranet.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/intranet.go b/config/intranet.go
new file mode 100644
--- /dev/null	(date 1730603023780)
+++ b/config/intranet.go	(date 1730603023780)
@@ -0,0 +1,119 @@
+package config
+
+import (
+	"bufio"
+	"fmt"
+	"os"
+	"strings"
+)
+
+const IntranetConfigPath string = "/etc/config/custom_network/intranet"
+
+// IntranetConfig OpenWrt 내부 네트워크 연결 설정을 위한 구조체
+type IntranetConfig struct {
+	// IP 설정
+	IpAddr  string // xxx.xxx.xxx.xxx 형식
+	Netmask string // xxx.xxx.xxx.xxx 형식
+}
+
+// NewIntranetConfig 기본값으로 초기화된 내부 네트워크 설정 구조체 생성
+func NewIntranetConfig() *IntranetConfig {
+	return &IntranetConfig{
+		IpAddr:  "192.168.0.1",
+		Netmask: "255.255.255.0",
+	}
+}
+
+// SaveToFile OpenWrt UCI 형식으로 설정을 파일에 저장
+func (i *IntranetConfig) SaveToFile() error {
+	f, err := os.Create(IntranetConfigPath)
+	if err != nil {
+		return fmt.Errorf("failed to create config file: %v", err)
+	}
+	defer f.Close()
+
+	writer := bufio.NewWriter(f)
+
+	// 기본 인터페이스 설정
+	_, err = writer.WriteString("config interface 'lan'\n")
+	if err != nil {
+		return err
+	}
+
+	// IP 주소 설정
+	if i.IpAddr != "" {
+		_, err = writer.WriteString(fmt.Sprintf("\toption ipaddr '%s'\n", i.IpAddr))
+		if err != nil {
+			return err
+		}
+	}
+
+	// 서브넷 마스크 설정
+	if i.Netmask != "" {
+		_, err = writer.WriteString(fmt.Sprintf("\toption netmask '%s'\n", i.Netmask))
+		if err != nil {
+			return err
+		}
+	}
+
+	return writer.Flush()
+}
+
+// LoadFromFile OpenWrt UCI 형식의 설정 파일에서 설정 읽기
+func (i *IntranetConfig) LoadFromFile() (*IntranetConfig, error) {
+	f, err := os.Open(IntranetConfigPath)
+	if err != nil {
+		return nil, fmt.Errorf("failed to open config file: %v", err)
+	}
+	defer f.Close()
+
+	config := NewIntranetConfig()
+	scanner := bufio.NewScanner(f)
+
+	for scanner.Scan() {
+		line := strings.TrimSpace(scanner.Text())
+		if line == "" || strings.HasPrefix(line, "#") {
+			continue
+		}
+
+		// option 라인 파싱
+		if strings.HasPrefix(line, "option") {
+			parts := strings.Fields(line)
+			if len(parts) < 3 {
+				continue
+			}
+
+			// 따옴표 제거
+			value := strings.Trim(strings.Join(parts[2:], " "), "'")
+
+			switch parts[1] {
+			case "ipaddr":
+				config.IpAddr = value
+			case "netmask":
+				config.Netmask = value
+			}
+		}
+	}
+
+	return config, scanner.Err()
+}
+
+// SetIPAddress IP 주소 설정 (xxx.xxx.xxx.xxx 형식)
+func (i *IntranetConfig) SetIPAddress(ip string) error {
+	parts := strings.Split(ip, ".")
+	if len(parts) != 4 {
+		return fmt.Errorf("invalid IP address format")
+	}
+	i.IpAddr = ip
+	return nil
+}
+
+// SetNetmask 서브넷 마스크 설정 (xxx.xxx.xxx.xxx 형식)
+func (i *IntranetConfig) SetNetmask(netmask string) error {
+	parts := strings.Split(netmask, ".")
+	if len(parts) != 4 {
+		return fmt.Errorf("invalid netmask format")
+	}
+	i.Netmask = netmask
+	return nil
+}
Index: config/internet.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/internet.go b/config/internet.go
new file mode 100644
--- /dev/null	(date 1730602719643)
+++ b/config/internet.go	(date 1730602719643)
@@ -0,0 +1,237 @@
+package config
+
+import (
+	"bufio"
+	"fmt"
+	"os"
+	"strings"
+)
+
+// ConnectionType 인터넷 연결 타입
+type ConnectionType string
+
+const (
+	DynamicIP ConnectionType = "dhcp"
+	StaticIP  ConnectionType = "static"
+)
+
+const ConfigPath string = "/etc/config/custom_network/internet"
+
+// InternetConfig OpenWrt 인터넷 연결 설정을 위한 구조체
+type InternetConfig struct {
+	// 네트워크 프로토콜 설정
+	Proto ConnectionType // 'dhcp' 또는 'static'
+
+	// IP 설정
+	IpAddr  string // xxx.xxx.xxx.xxx 형식
+	Netmask string // xxx.xxx.xxx.xxx 형식
+	Gateway string // xxx.xxx.xxx.xxx 형식
+
+	// DNS 설정
+	DNS          []string // DNS 서버 목록
+	UseCustomDNS bool     // DNS 커스텀 설정 여부
+
+	// MAC 주소 설정
+	MACAddr  string // XX:XX:XX:XX:XX:XX 형식
+	CloneMAC bool   // MAC 주소 변경 사용 여부
+
+	// MTU 설정
+	MTU int // MTU 값
+}
+
+// NewInternetConfig 기본값으로 초기화된 인터넷 설정 구조체 생성
+func NewInternetConfig() *InternetConfig {
+	return &InternetConfig{
+		Proto:        DynamicIP,
+		IpAddr:       "",
+		Netmask:      "",
+		Gateway:      "",
+		DNS:          []string{},
+		UseCustomDNS: false,
+		MACAddr:      "",
+		CloneMAC:     false,
+		MTU:          1500,
+	}
+}
+
+// SaveToFile OpenWrt UCI 형식으로 설정을 파일에 저장
+func (i *InternetConfig) SaveToFile() error {
+	var err error
+	f, err := os.Create(ConfigPath)
+
+	if err != nil {
+		return fmt.Errorf("failed to create config file: %v", err)
+	}
+
+	defer f.Close()
+
+	writer := bufio.NewWriter(f)
+
+	// 기본 인터페이스 설정
+	_, err = writer.WriteString("config interface 'wan'\n")
+
+	if err != nil {
+		return err
+	}
+
+	_, err = writer.WriteString(fmt.Sprintf("\toption proto '%s'\n", i.Proto))
+
+	if err != nil {
+		return err
+	}
+
+	// IP 관련 설정
+	if i.Proto == StaticIP {
+		if i.IpAddr != "" {
+			_, err := writer.WriteString(fmt.Sprintf("\toption ipaddr '%s'\n", i.IpAddr))
+
+			if err != nil {
+				return err
+			}
+		}
+		if i.Netmask != "" {
+			_, err := writer.WriteString(fmt.Sprintf("\toption netmask '%s'\n", i.Netmask))
+
+			if err != nil {
+				return err
+			}
+		}
+		if i.Gateway != "" {
+			_, err := writer.WriteString(fmt.Sprintf("\toption gateway '%s'\n", i.Gateway))
+
+			if err != nil {
+				return err
+			}
+		}
+	}
+
+	// DNS 설정
+	if i.UseCustomDNS {
+		_, err := writer.WriteString("\toption peerdns '0'\n")
+
+		if err != nil {
+			return err
+		}
+
+		for idx, dns := range i.DNS {
+			_, err := writer.WriteString(fmt.Sprintf("\toption dns_%d '%s'\n", idx+1, dns))
+			if err != nil {
+				return err
+			}
+		}
+	}
+
+	// MAC 주소 설정
+	if i.CloneMAC && i.MACAddr != "" {
+		_, err := writer.WriteString(fmt.Sprintf("\toption macaddr '%s'\n", i.MACAddr))
+		if err != nil {
+			return err
+		}
+	}
+
+	// MTU 설정
+	if i.MTU != 1500 {
+		_, err := writer.WriteString(fmt.Sprintf("\toption mtu '%d'\n", i.MTU))
+		if err != nil {
+			return err
+		}
+	}
+
+	return writer.Flush()
+}
+
+// LoadFromFile OpenWrt UCI 형식의 설정 파일에서 설정 읽기
+func LoadFromFile() (*InternetConfig, error) {
+	f, err := os.Open(ConfigPath)
+	if err != nil {
+		return nil, fmt.Errorf("failed to open config file: %v", err)
+	}
+	defer f.Close()
+
+	config := NewInternetConfig()
+	scanner := bufio.NewScanner(f)
+
+	for scanner.Scan() {
+		line := strings.TrimSpace(scanner.Text())
+		if line == "" || strings.HasPrefix(line, "#") {
+			continue
+		}
+
+		// option 라인 파싱
+		if strings.HasPrefix(line, "option") {
+			parts := strings.Fields(line)
+			if len(parts) < 3 {
+				continue
+			}
+
+			// 따옴표 제거
+			value := strings.Trim(strings.Join(parts[2:], " "), "'")
+
+			switch parts[1] {
+			case "proto":
+				config.Proto = ConnectionType(value)
+			case "ipaddr":
+				config.IpAddr = value
+			case "netmask":
+				config.Netmask = value
+			case "gateway":
+				config.Gateway = value
+			case "peerdns":
+				config.UseCustomDNS = value != "0"
+			case "macaddr":
+				config.MACAddr = value
+				config.CloneMAC = true
+			case "mtu":
+				_, err := fmt.Sscanf(value, "%d", &config.MTU)
+				if err != nil {
+					return nil, err
+				}
+			}
+
+			// DNS 서버 파싱
+			if strings.HasPrefix(parts[1], "dns_") {
+				config.DNS = append(config.DNS, value)
+			}
+		}
+	}
+
+	return config, scanner.Err()
+}
+
+// SetIPAddress IP 주소 설정 (xxx.xxx.xxx.xxx 형식)
+func (i *InternetConfig) SetIPAddress(ip string) error {
+	parts := strings.Split(ip, ".")
+	if len(parts) != 4 {
+		return fmt.Errorf("invalid IP address format")
+	}
+	i.IpAddr = ip
+	return nil
+}
+
+// SetMACAddress MAC 주소 설정 (XX:XX:XX:XX:XX:XX 형식)
+func (i *InternetConfig) SetMACAddress(mac string) error {
+	parts := strings.Split(strings.ToUpper(mac), ":")
+	if len(parts) != 6 {
+		return fmt.Errorf("invalid MAC address format")
+	}
+	i.MACAddr = mac
+	i.CloneMAC = true
+	return nil
+}
+
+// SetDNSServers DNS 서버 목록 설정
+func (i *InternetConfig) SetDNSServers(servers []string) {
+	i.DNS = servers
+}
+
+// EnableDynamicIP DynamicIP 설정으로 변경
+func (i *InternetConfig) EnableDynamicIP() {
+	i.Proto = DynamicIP
+	i.IpAddr = ""
+	i.Gateway = ""
+}
+
+// EnableStaticIP 고정 IP 설정으로 변경
+func (i *InternetConfig) EnableStaticIP() {
+	i.Proto = StaticIP
+}
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"GO-242.22855.106\">\r\n    <data-source name=\"example\" uuid=\"38fa8063-8e9a-4d0a-b2d5-630e25f50e4e\">\r\n      <database-info product=\"SQLite\" version=\"3.45.1\" jdbc-version=\"4.2\" driver-name=\"SQLite JDBC\" driver-version=\"3.45.1.0\" dbms=\"SQLITE\" exact-version=\"3.45.1\" exact-driver-version=\"3.45\">\r\n        <identifier-quote-string>&quot;</identifier-quote-string>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"mixed\" quoted-identifiers=\"mixed\" />\r\n      <auth-provider>no-auth</auth-provider>\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\" qname=\"@\" />\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision f7abc0c3414a4504a34bc08e0b085781a17610a7)
+++ b/.idea/dataSources.local.xml	(date 1730550250996)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="GO-242.22855.106">
+  <component name="dataSourceStorageLocal" created-in="GO-242.23339.24">
     <data-source name="example" uuid="38fa8063-8e9a-4d0a-b2d5-630e25f50e4e">
       <database-info product="SQLite" version="3.45.1" jdbc-version="4.2" driver-name="SQLite JDBC" driver-version="3.45.1.0" dbms="SQLITE" exact-version="3.45.1" exact-driver-version="3.45">
         <identifier-quote-string>&quot;</identifier-quote-string>
Index: controller/index.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller\r\n\r\nimport \"github.com/gofiber/fiber/v2\"\r\n\r\nfunc Index(c *fiber.Ctx) error {\r\n\treturn c.SendString(\"Router API Index Page\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controller/index.go b/controller/index.go
--- a/controller/index.go	(revision f7abc0c3414a4504a34bc08e0b085781a17610a7)
+++ b/controller/index.go	(date 1730550250798)
@@ -3,5 +3,5 @@
 import "github.com/gofiber/fiber/v2"
 
 func Index(c *fiber.Ctx) error {
-	return c.SendString("Router API Index Page")
+	return c.SendString("Router API")
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"ALL\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b1b779df-94c2-44b5-a331-9da27552d852\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/utils/firewall.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.gitignore\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/modules.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/router_api.iml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/vcs.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Dockerfile\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Dockerfile\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/build\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/build\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/build.bat\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/build.bat\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/controller/hook.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/controller/hook.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/utils/check_account.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/utils/check_account.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/utils/track_connection.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/utils/track_connection.go\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Go File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"GOROOT\" url=\"file://C:/Program Files/Go\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;mchu7797&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;git@github.com:scorTnT/ddos_router&quot;,\r\n    &quot;accountId&quot;: &quot;c70a62ae-f351-4bc6-a594-4df79b9fd1d8&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mZ7mppse0WE5ZxzjhKwm485mLi\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultGoTemplateProperty\": \"Go File\",\r\n    \"Go Build.go build github.com/ScorTnT/ddos_router/backend.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.go.formatter.settings.were.checked\": \"true\",\r\n    \"RunOnceActivity.go.migrated.go.modules.settings\": \"true\",\r\n    \"RunOnceActivity.go.modules.go.list.on.any.changes.was.set\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"go.import.settings.migrated\": \"true\",\r\n    \"go.sdk.automatically.set\": \"true\",\r\n    \"last_opened_file_path\": \"P:/Development/ddos_router/backend\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"go build github.com/ScorTnT/ddos_router/backend\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\" nameIsGenerated=\"true\">\r\n      <module name=\"backend\" />\r\n      <target name=\"WSL - Ubuntu\" />\r\n      <working_directory value=\"$PROJECT_DIR$\" />\r\n      <kind value=\"PACKAGE\" />\r\n      <package value=\"github.com/ScorTnT/ddos_router/backend\" />\r\n      <directory value=\"$PROJECT_DIR$\" />\r\n      <filePath value=\"$PROJECT_DIR$\" />\r\n      <option name=\"build_on_remote_target\" value=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-gosdk-5df93f7ad4aa-df9ad98b711f-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-242.22855.106\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-GO-242.22855.106\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VgoProject\">\r\n    <settings-migrated>true</settings-migrated>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f7abc0c3414a4504a34bc08e0b085781a17610a7)
+++ b/.idea/workspace.xml	(date 1730601493309)
@@ -5,17 +5,12 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="b1b779df-94c2-44b5-a331-9da27552d852" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/utils/firewall.go" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/router_api.iml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Dockerfile" beforeDir="false" afterPath="$PROJECT_DIR$/Dockerfile" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/build" beforeDir="false" afterPath="$PROJECT_DIR$/build" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/build.bat" beforeDir="false" afterPath="$PROJECT_DIR$/build.bat" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/controller/hook.go" beforeDir="false" afterPath="$PROJECT_DIR$/controller/hook.go" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/utils/check_account.go" beforeDir="false" afterPath="$PROJECT_DIR$/utils/check_account.go" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/utils/track_connection.go" beforeDir="false" afterPath="$PROJECT_DIR$/utils/track_connection.go" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/config/file.go" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/config/internet.go" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/config/intranet.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/controller/index.go" beforeDir="false" afterPath="$PROJECT_DIR$/controller/index.go" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -64,6 +59,7 @@
     "git-widget-placeholder": "main",
     "go.import.settings.migrated": "true",
     "go.sdk.automatically.set": "true",
+    "ignore.virus.scanning.warn.message": "true",
     "last_opened_file_path": "P:/Development/ddos_router/backend",
     "node.js.detected.package.eslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -86,14 +82,25 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-gosdk-5df93f7ad4aa-df9ad98b711f-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-242.22855.106" />
-        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-GO-242.22855.106" />
+        <option value="bundled-gosdk-5df93f7ad4aa-df9ad98b711f-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-242.23339.24" />
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-GO-242.23339.24" />
       </set>
     </attachedChunks>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VgoProject">
     <settings-migrated>true</settings-migrated>
Index: config/file.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/file.go b/config/file.go
new file mode 100644
--- /dev/null	(date 1730603896260)
+++ b/config/file.go	(date 1730603896260)
@@ -0,0 +1,170 @@
+package config
+
+import (
+	"fmt"
+	"io"
+	"os"
+	"os/exec"
+	"path/filepath"
+	"time"
+)
+
+const (
+	CustomNetworkPath = "/etc/config/custom_network"
+	NetworkConfigPath = "/etc/config/network"
+	NetworkBackupPath = "/etc/config/network.bak"
+)
+
+// ApplyNetworkConfig 네트워크 설정을 적용하는 함수
+func ApplyNetworkConfig() error {
+	// 1. 현재 network 설정 백업
+	err := copyFile(NetworkConfigPath, NetworkBackupPath)
+	if err != nil {
+		return fmt.Errorf("failed to backup current network config: %v", err)
+	}
+
+	// 2. 새 설정 파일 생성
+	newConfig, err := os.Create(NetworkConfigPath)
+	if err != nil {
+		return fmt.Errorf("failed to create new network config: %v", err)
+	}
+	defer newConfig.Close()
+
+	// 3. 설정 파일들을 순서대로 합치기
+	files := []string{
+		filepath.Join(CustomNetworkPath, "another"),
+		filepath.Join(CustomNetworkPath, "internet"),
+		filepath.Join(CustomNetworkPath, "intranet"),
+	}
+
+	for _, file := range files {
+		err := appendFile(newConfig, file)
+		if err != nil {
+			return fmt.Errorf("failed to append %s: %v", file, err)
+		}
+	}
+
+	// 4. UCI 설정 적용 시도
+	err = applyUCIConfig()
+	if err != nil {
+		// UCI 설정 적용 실패시 백업에서 복원
+		fmt.Printf("Failed to apply new network configuration: %v\nRestoring previous configuration...\n", err)
+		restoreErr := restoreFromBackup()
+		if restoreErr != nil {
+			return fmt.Errorf("critical error: failed to restore network config: %v (after failing to apply new config: %v)",
+				restoreErr, err)
+		}
+		return fmt.Errorf("failed to apply new network config (restored to previous config): %v", err)
+	}
+
+	return nil
+}
+
+// restoreFromBackup 백업에서 복원하는 함수
+func restoreFromBackup() error {
+	// 백업 파일로 복원
+	err := copyFile(NetworkBackupPath, NetworkConfigPath)
+	if err != nil {
+		return fmt.Errorf("failed to copy backup file: %v", err)
+	}
+
+	// uci commit 실행
+	commitCmd := exec.Command("uci", "commit", "network")
+	if output, err := commitCmd.CombinedOutput(); err != nil {
+		return fmt.Errorf("failed to commit restored config: %v (output: %s)", err, output)
+	}
+
+	// 네트워크 재시작
+	reloadCmd := exec.Command("/etc/init.d/network", "reload")
+	if output, err := reloadCmd.CombinedOutput(); err != nil {
+		return fmt.Errorf("failed to reload network with restored config: %v (output: %s)", err, output)
+	}
+
+	return nil
+}
+
+// applyUCIConfig UCI 설정을 적용하는 함수
+func applyUCIConfig() error {
+	// 1. UCI commit
+	commitCmd := exec.Command("uci", "commit", "network")
+	if output, err := commitCmd.CombinedOutput(); err != nil {
+		return fmt.Errorf("failed to commit network config: %v (output: %s)", err, output)
+	}
+
+	// 2. 네트워크 서비스 재시작
+	reloadCmd := exec.Command("/etc/init.d/network", "reload")
+	if output, err := reloadCmd.CombinedOutput(); err != nil {
+		return fmt.Errorf("failed to reload network: %v (output: %s)", err, output)
+	}
+
+	// 3. 안정화를 위한 대기
+	time.Sleep(2 * time.Second)
+
+	// 4. 네트워크 상태 확인
+	checkCmd := exec.Command("ping", "-c", "1", "-W", "3", "8.8.8.8")
+	if err := checkCmd.Run(); err != nil {
+		return fmt.Errorf("network connectivity check failed")
+	}
+
+	// 5. 방화벽 재시작
+	fwCmd := exec.Command("service", "firewall", "restart")
+	if output, err := fwCmd.CombinedOutput(); err != nil {
+		return fmt.Errorf("failed to restart firewall: %v (output: %s)", err, output)
+	}
+
+	return nil
+}
+
+// copyFile 파일 복사 함수
+func copyFile(src, dst string) error {
+	source, err := os.Open(src)
+	if err != nil {
+		return err
+	}
+	defer source.Close()
+
+	destination, err := os.Create(dst)
+	if err != nil {
+		return err
+	}
+	defer destination.Close()
+
+	_, err = io.Copy(destination, source)
+	return err
+}
+
+// appendFile 파일 내용을 추가하는 함수
+func appendFile(dst *os.File, src string) error {
+	source, err := os.Open(src)
+	if err != nil {
+		if os.IsNotExist(err) {
+			// 파일이 없으면 무시하고 진행
+			return nil
+		}
+		return err
+	}
+	defer source.Close()
+
+	// 추가할 때 빈 줄 하나 넣기
+	_, err = dst.WriteString("\n")
+	if err != nil {
+		return err
+	}
+
+	_, err = io.Copy(dst, source)
+	return err
+}
+
+// ValidateCustomConfigs 커스텀 설정 파일들의 존재 여부를 확인하는 함수
+func ValidateCustomConfigs() error {
+	requiredFiles := []string{"internet", "intranet"}
+
+	for _, file := range requiredFiles {
+		path := filepath.Join(CustomNetworkPath, file)
+		if _, err := os.Stat(path); os.IsNotExist(err) {
+			return fmt.Errorf("required config file not found: %s", path)
+		}
+	}
+
+	return nil
+}
